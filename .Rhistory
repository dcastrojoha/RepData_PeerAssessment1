install.packages('ggplot2')
library('ggplot2')
install.packages('dplyr')
library('dplyr')
install.packages('boot')
library('boot')
results <- boot(data=mtcars, statistic=mean, R=1000, formula=mpg)
results
# function to obtain R-Squared from the data
rsq <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(summary(fit)$r.square)
}
results <- boot(data=mtcars, statistic=rsq,
R=1000, formula=mpg~wt+disp)
results
plot(results)
boot.ci(results, type="bca")
x1 <- mtcars
View(x1)
samplemean <- function(x, d) {return(mean(x[d]))}
b <- boot(x1$mpg, samplemean, R = 1000)
plot(b)
?boot.ci
boot.ci(b, type = all)
boot.ci(b, type = 'all')
install.packages('kernlab')
data(spam)
?spam
library('kernlab')
data(spam)
?rbinom
trainIndicator <- rbinom(n = 4601, size = 1, prob = 0.5)    # random coin flip to split dataset
head(spam)
trainspam <- spam[trainIndicator == 1, ]
testspam <- spam[trainIndicator == 0, ]
names(trainspam)
head(trainspam)
table(trainspam$type)
# Perform sub-sampling of the dataset
set.seed(3435)
trainIndicator <- rbinom(n = 4601, size = 1, prob = 0.5)    # random coin flip to split dataset
trainspam <- spam[trainIndicator == 1, ]
testspam <- spam[trainIndicator == 0, ]
# Exploratory data analysis
names(trainspam)
head(trainspam)
table(trainspam$type)
plot(trainspam$capitalAve ~ trainspam$type)
plot(log10(trainspam$capitalAve + 1) ~ trainspam$type)
log10(0)
log10(1)
log10(2)
head(spam)
plot(log10(trainspam[ , 1:4] +1))
?hclust
?t
?dist
hCluster <- hclust(dist(t(trainspam[, 1:57])))
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(trainspam[, 1:57]))))
hClusterUpdated <- hclust(dist(t(log10(trainspam[, 1:55]))))
plot(hCluster)
plot(hClusterUpdated)
hClusterUpdated <- hclust(dist(t(log10(trainspam[, 1:55]+1))))
plot(hClusterUpdated)
trainspam$NumType < - as.numeric(trainspam$type) - 1
head(trainspam)
trainspam$NumType < - as.numeric(trainspam$type)
trainspam$numType < - as.numeric(trainspam$type) - 1
as.numeric(trainspam$type)
trainspam$numType < - as.numeric(trainspam$type)- 1
trainspam$numType <- as.numeric(trainspam$type)- 1
head(trainspam)
costFunction <- function(x, y) sum(x != (y<0.5))
costFunction <- function(x, y) sum(x != (y>0.5))
library(boot)
cvError <- rep(NA, 55)
for (i in 1:55){
lmFormula <- reformulate(names(trainspam)[i], response = "numType")
glmFit <- glm(lmFormula, family = "binomial", data = trainspam)
cvError[i] <- cv.glm(trainspam, glmFit, costFunction, 2)$delta[2]
}
warnings()
?which.min
?cv.glm
names(trainspam)[which.min(cvError)]
head(cvError)
predictionTest <- predict(predictionModel, testspam)
predictionModel <- glm(numType ~ charDollar, family = "binomial", data = trainspam)
predictionTest <- predict(predictionModel, testspam)
predictedSpam <- rep("nonspam", dim(testspam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
head(testspam)
predictionTest
?predict
table(predictedSpam, testspam$type)
error_rate <- (61+458)/(61+458+449+1346)
error_rate
install.packages("grDevices")
install.packages("grDevices")
library("grDevices")
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(2)
pal(seq(0,1, len = 10)
pal(seq(0,1, len = 10))
pal(seq(0,1, len = 10))
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
install.packages("RColorBrewer")
library("RColorBrewer")
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
pal
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
str(iris.tidy)
install.packages("dplyr")
version
install.packages("knitr")
install.packages("rmarkdown")
setwd("D:/GitHub/RepData_PeerAssessment1")
dat1 <- read.csv(activity.zip)
dat1 <- read.csv("activity.zip")
View(dat1)
dat1 <- unzip("activity.zip")
dat1 <- unzip(activity.zip)
unzip(activity.zip)
unzip("activity.zip")
read.csv("activity.csv", sep = ",")
dat1 <- read.csv("activity.csv", sep = ",")
head(Dat1)
head(dat1)
tail(dat1)
library("dplyr")
library("ggplot2")
stepsperday <- dat1 %<% group_by(date) %<% summarise(steps = sum(interval))
stepsperday <- dat1 %>% group_by(date) %>% summarise(steps = sum(interval))
stepsperday
View(stepsperday)
View(dat1)
sum(dat1$interval)
20686320/61
stepsperday <- dat1 %>% group_by(date) %>% mutate(steps = sum(interval))
stepsperday <- dat1 %>% group_by(date) %>% summarise(steps = sum(interval))
View(stepsperday)
stepsperday <- dat1 %>% group_by(date) %>% summarise(steps = mean(interval))
View(stepsperday)
head(data1)
head(dat1)
stepsperday <- dat1 %>% group_by(date) %>% summarise(step = mean(interval))
View(stepsperday)
str(dat)
str(dat1)
dat1$date <- as.Date(dat1$date)
str(dat1)
stepsperday <- dat1 %>% group_by(date) %>% summarise(step = sum(interval))
View(stepsperday)
